/*
926. Flip String to Monotone Increasing
A string of '0's and '1's is monotone increasing if it consists of some number of '0's (possibly 0),
followed by some number of '1's (also possibly 0.)

We are given a string S of '0's and '1's, and we may flip any '0' to a '1' or a '1' to a '0'.

Return the minimum number of flips to make S monotone increasing.

Example 1:
	Input: "00110"
	Output: 1
	Explanation: We flip the last digit to get 00111.

Example 2:
	Input: "010110"
	Output: 2
	Explanation: We flip to get 011111, or alternatively 000111.

Example 3:
	Input: "00011000"
	Output: 2
	Explanation: We flip to get 00000000.

Note:
	1 <= S.length <= 20000
	S only consists of '0' and '1' characters.
*/
package main

import (
	"fmt"
	"time"
)

func main() {
	
	t := time.Now()
	fmt.Println(minFlipsMonoIncr(S))
	fmt.Println(time.Since(t))
}
func minFlipsMonoIncr(S string) int {
	rst := len(S)
	for _, v := range fun(S) {
		if v < rst {
			rst = v
		}
	}
	return rst
}

func fun(Ss string) []int {
	var rst []int
	if len(Ss) == 1 { // no matter is 0 or 1
		rst = append(rst, 0)
	} else {
		tmpFlag := false
		for i := len(Ss) - 1; i >= 0; i-- {
			if Ss[i:i+1] == "0" { // last 0 in string
				tmpFlag = true
				tmp := 0
				for j := 0; j < i; j++ {
					if Ss[j:j+1] == "1" {
						tmp++
					}
				}
				rst = append(rst, tmp)
				for _, v := range fun(Ss[0:i]) {
					rst = append(rst, 1+v)
				}
				break
			}
		}
		if !tmpFlag { // no 0 in string
			rst = append(rst, 0)
		}
	}
	return rst
}
